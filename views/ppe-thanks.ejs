<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('partials/head') %>
</head>

<body class=" bg-gradient">

    <%- include('partials/navbar') %>
    <div class="container mt-5">
        <div class="jumbotron">
            <h1 class="display-4">Thank you!</h1>
            <p>We have sent you an email confirmation along with a link to view the status of your application.
                Once we match someone with you, we will send you an email notification or contact you directly
                in case of urgency.
            </p>
            <p class="lead">If you wish to receive notifications in addition to emails, please click the Subscribe button below.</p>
            <hr class="my-4">
            <p class="lead">
                <button class="btn btn-primary btn-lg text-white" id="subscribe" role="button">Subscribe</button>
            </p>
            <a href="/">Back to home page.</a>
        </div>
    </div>

</body>
<script src="/config.js"></script>
<script>
    const forId = '<%- forId %>';
    const forType = '<%- forType %>';
    function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }
    function unsupported() {
        alert("Sorry! Push notifications are not available for your device");
    }
    function checkSupport() {
        if (!('serviceWorker' in navigator)) {
            // Service Worker isn't supported on this browser, disable or hide UI.
            unsupported();
            return false;
        }
        if (!('PushManager' in window)) {
            // Push isn't supported on this browser, disable or hide UI.
            unsupported();
            return false;
        }
        return true;
    }
    function registerServiceWorker() {
        return navigator.serviceWorker.register('/service-worker.js')
            .then(function (registration) {
                console.log('Service worker successfully registered.');
                return registration;
            })
            .catch(function (err) {
                console.error('Unable to register service worker.', err);
            });
    }

    function askPermission() {
        return new Promise(function (resolve, reject) {
            const permissionResult = Notification.requestPermission(function (result) {
                resolve(result);
            });

            if (permissionResult) {
                permissionResult.then(resolve, reject);
            }
        })
            .then(function (permissionResult) {
                if (permissionResult !== 'granted') {
                    throw new Error('We weren\'t granted permission.');
                }
            });
    }

    function subscribeUserToPush() {
        return navigator.serviceWorker.register('/service-worker.js')
            .then(function (registration) {
                const subscribeOptions = {
                    userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array(
                        config.serverPub
                    )
                };

                return registration.pushManager.subscribe(subscribeOptions);
            })
            .then(function (pushSubscription) {
                console.log('Received PushSubscription: ', JSON.stringify(pushSubscription));
                return pushSubscription;
            });
    }
    function sendSubscriptionToBackEnd(subscription) {
        return fetch('/ppe/save-subscription/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                forId: forId,
                forType: forType,
                pushSubscription: JSON.stringify(subscription)
            })
        })
            .then(function (response) {
                if (!response.ok) {
                    throw new Error('Bad status code from server.');
                }

                return response.json();
            })
            .then(function (responseData) {
                if (!(responseData.data && responseData.data.success)) {
                    throw new Error('Bad response from server.');
                }
                return responseData;
            });
    }
    $('#subscribe').on('click', function () {
        if (!checkSupport()) {
            return;
        }
        // let registration = registerServiceWorker();
        askPermission().
            then(function () {
                return registerServiceWorker();
            }).
            then(function () {
                return subscribeUserToPush();
            })
            .then(function (ps) {
                console.log(ps);
                return sendSubscriptionToBackEnd(ps);
            })
            .then(function (res) {
                console.log(res);
                alert("You have been subscribed to receive an alert when we find a match. You will now be redirected to the home page")
                window.location.replace('/');
            })
        console.log("OK")
    })
</script>

</html>
